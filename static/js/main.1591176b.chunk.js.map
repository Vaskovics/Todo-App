{"version":3,"sources":["utils/fetchClient.ts","types/ErrorType.ts","api/todos.ts","types/SortBy.ts","Components/ErrorNorification.tsx","Components/TodosList.tsx","Components/TodoFooter.tsx","Components/Header.tsx","utils/functionsHelper.ts","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","ErrorType","client","deleteTodo","todoId","updateTodo","todoToUpdate","SortBy","ErrorNorification","timeOutId","errorType","resetError","changeErrorType","useState","isError","setIsError","useEffect","none","clearTimeout","className","classNames","hidden","type","onClick","TodosList","todos","updateTodoStatus","onDeleteTodo","loadingIds","tempTodo","updateTodoOnServer","updateLoadingStatus","updateTodosList","updateError","todoToEdit","setTodoToEdit","newTitleEdit","setNewTitleEdit","inputRef","useRef","handlechangeEdit","event","currentTarget","value","current","focus","title","handleUpdateTodoOnServer","a","key","preventDefault","trim","prevTodosList","map","obj","updatedTodo","updatedTodos","todo","id","updatedTodoFromServer","update","delete","handleBlur","completed","ref","placeholder","onDoubleClick","onChange","onKeyDown","onBlur","some","TodoFooter","onFilterAllTodos","onFilterActiveTodos","onFilterCompletedTodos","onClearCompleted","selectedFilter","activeTodos","completedTodosLength","filter","length","href","selected","all","active","Header","updateTodos","postNewTodo","addTempTodo","newTodoTitle","setNewTodoTitle","isAllCompleted","setIsAllCompleted","every","todosPromises","allTodosToCompleted","prevLoadingIds","push","todosFromServer","catch","finally","onSubmit","e","disabled","target","newTodo","Math","random","toString","slice","userId","add","USER_ID","App","setTodos","typeOfError","setTypeOfError","filterBy","setFilterBY","setTempTodo","setLoadingIds","countActiveTodos","useMemo","reduce","count","load","fetchData","postNewTodoOnServer","todoToPost","newTodoFromServer","prevTodos","currentTodo","currentIds","prevTodo","handleClearCompletedTodos","clearedTodos","clearedTodosID","completedTodo","handleDeleteTodo","deletedTodo","visibleTodosList","error","todoList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1591176b.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","// eslint-disable-next-line no-shadow\nexport enum ErrorType {\n  none = '',\n  add = 'Unable to add a todo',\n  delete = 'Unable to delete a todo',\n  update = 'Unable to update a todo',\n  empty = 'Title can\\'t by empty',\n  load = 'Unable to load todos',\n}\n","import { Todo } from '../types/Todo';\nimport { client } from '../utils/fetchClient';\n\nexport const getTodos = (userId: number) => {\n  return client.get<Todo[]>(`/todos?userId=${userId}`);\n};\n\nexport const postTodo = (userId: number, todoToPost: Todo) => {\n  return client.post<Todo>(`/todos?userId=${userId}`, todoToPost);\n};\n\nexport const deleteTodo = (todoId: number) => {\n  return client.delete(`/todos/${todoId}`);\n};\n\nexport const updateTodo = (todoId: number, todoToUpdate: Todo) => {\n  return client.patch<Todo>(`/todos/${todoId}`, todoToUpdate);\n};\n","/* eslint-disable no-shadow */\nexport enum SortBy {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n","/* eslint-disable jsx-a11y/control-has-associated-label */\n\nimport React, {\n  useEffect,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { ErrorType } from '../types/ErrorType';\n\ntype ErrorComponent = {\n  errorType: ErrorType,\n  changeErrorType: (error: ErrorType) => void,\n};\n\nexport const ErrorNorification: React.FC<ErrorComponent> = ({\n  errorType,\n  changeErrorType: resetError,\n}) => {\n  const [isError, setIsError] = useState(false);\n\n  let timeOutId: NodeJS.Timeout;\n\n  useEffect(() => {\n    if (!isError) {\n      timeOutId = setTimeout(() => {\n        setIsError(true);\n        resetError(ErrorType.none);\n      }, 3000);\n    }\n\n    return () => {\n      clearTimeout(timeOutId);\n    };\n  }, []);\n\n  const handleCLearErrorBtn = () => {\n    setIsError(true);\n  };\n\n  return (\n    <div\n      className={classNames(\n        'notification',\n        'is-danger',\n        'is-light',\n        'has-text-weight-normal',\n        {\n          hidden: isError,\n        },\n      )}\n    >\n      <button\n        type=\"button\"\n        className=\"delete\"\n        onClick={handleCLearErrorBtn}\n      />\n      {errorType}\n    </div>\n  );\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport classNames from 'classnames';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Todo } from '../types/Todo';\n\nimport { ErrorType } from '../types/ErrorType';\n\ntype ListOfTodos = {\n  todos: Todo[],\n  updateTodoStatus: (todo: Todo) => void,\n  onDeleteTodo: (todo: Todo) => void,\n  loadingIds: number[],\n  tempTodo: Todo | null,\n  updateTodoOnServer: (id: number, todo: Todo) => Promise<Todo>,\n  updateLoadingStatus: (id: number[]) => void,\n  updateTodosList: (updatedTodos: Todo[]) => void;\n  updateError: (error: ErrorType) => void,\n};\n\nexport const TodosList: React.FC<ListOfTodos> = ({\n  todos,\n  updateTodoStatus,\n  onDeleteTodo,\n  loadingIds,\n  tempTodo,\n  updateTodoOnServer,\n  updateLoadingStatus,\n  updateTodosList,\n  updateError,\n}) => {\n  const [todoToEdit, setTodoToEdit] = useState<Todo | null>(null);\n  const [newTitleEdit, setNewTitleEdit] = useState('');\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const handlechangeEdit = (\n    event: React.ChangeEvent<HTMLInputElement>\n    | React.FocusEvent<HTMLInputElement>,\n  ) => {\n    setNewTitleEdit(event.currentTarget.value);\n  };\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [todoToEdit]);\n\n  useEffect(() => {\n    if (todoToEdit) {\n      setNewTitleEdit(todoToEdit.title);\n    }\n  }, [todoToEdit]);\n\n  const handleUpdateTodoOnServer = async (\n    event: React.KeyboardEvent<HTMLInputElement>,\n  ) => {\n    if (event.key === 'Escape') {\n      setTodoToEdit(null);\n    }\n\n    if ((event.key === 'Enter' || event.type === 'blur')) {\n      event.preventDefault();\n      if (newTitleEdit.trim() !== '' && todoToEdit) {\n        if (newTitleEdit === todoToEdit.title) {\n          setTodoToEdit(null);\n\n          return;\n        }\n\n        const prevTodosList = todos.map(obj => ({ ...obj }));\n        const updatedTodo = {\n          ...todoToEdit,\n          title: newTitleEdit,\n        };\n\n        const updatedTodos = todos.map(todo => {\n          if (todo.id === todoToEdit.id) {\n            return updatedTodo;\n          }\n\n          return todo;\n        });\n\n        updateTodosList(updatedTodos);\n\n        updateLoadingStatus([todoToEdit.id]);\n        setTodoToEdit(null);\n\n        try {\n          const updatedTodoFromServer: Todo = await updateTodoOnServer(\n            todoToEdit.id, updatedTodo,\n          );\n\n          updateTodosList([...todos].map(todo => {\n            if (todo.id === updatedTodoFromServer.id) {\n              return updatedTodoFromServer;\n            }\n\n            return todo;\n          }));\n        } catch {\n          updateError(ErrorType.update);\n          updateTodosList(prevTodosList);\n        } finally {\n          updateLoadingStatus([]);\n        }\n      } else if (todoToEdit) {\n        try {\n          onDeleteTodo(todoToEdit);\n        } catch {\n          updateError(ErrorType.delete);\n        }\n      }\n    }\n  };\n\n  const handleBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    handleUpdateTodoOnServer(\n      event as unknown as React.KeyboardEvent<HTMLInputElement>,\n    );\n  };\n\n  return (\n    <ul className=\"todoapp__main\">\n      {todos.map(todo => (\n        <li\n          className={classNames(\n            'todo',\n            {\n              completed: todo.completed,\n            },\n          )}\n          key={todo.id}\n        >\n          <label className=\"todo__status-label\">\n            <input\n              type=\"checkbox\"\n              className=\"todo__status\"\n              onClick={() => updateTodoStatus(todo)}\n            />\n          </label>\n\n          {todoToEdit?.id === todo.id ? (\n            <form>\n              <input\n                ref={inputRef}\n                type=\"text\"\n                className=\"todo__title-field\"\n                placeholder=\"Empty todo will be deleted\"\n                value={newTitleEdit}\n                onDoubleClick={() => setTodoToEdit(todo)}\n                onChange={handlechangeEdit}\n                onKeyDown={handleUpdateTodoOnServer}\n                onBlur={handleBlur}\n              />\n            </form>\n          ) : (\n            <>\n              <span\n                className=\"todo__title\"\n                onDoubleClick={() => setTodoToEdit(todo)}\n              >\n                {todo.title}\n              </span>\n              <button\n                type=\"button\"\n                className=\"todo__remove\"\n                onClick={() => onDeleteTodo(todo)}\n              >\n                ×\n              </button>\n            </>\n          )}\n\n          <div\n            className={classNames(\n              'modal',\n              'overlay',\n              {\n                'is-active': tempTodo?.id === todo.id\n                  || loadingIds.some(id => todo.id === id),\n              },\n            )}\n          >\n            <div className=\"modal-background has-background-white-ter\" />\n            <div className=\"loader\" />\n          </div>\n        </li>\n      ))}\n\n    </ul>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { SortBy } from '../types/SortBy';\nimport { Todo } from '../types/Todo';\n\ntype Footer = {\n  onFilterAllTodos: () => void,\n  onFilterActiveTodos: () => void,\n  onFilterCompletedTodos: () => void,\n  onClearCompleted: () => void,\n  selectedFilter: SortBy\n  activeTodos: number,\n  todos: Todo[]\n};\n\nexport const TodoFooter: React.FC<Footer> = ({\n  onFilterAllTodos,\n  onFilterActiveTodos,\n  onFilterCompletedTodos,\n  onClearCompleted,\n  selectedFilter,\n  activeTodos,\n  todos,\n}) => {\n  const completedTodosLength = todos.filter(todo => todo.completed).length;\n\n  return (\n    <footer className=\"todoapp__footer\">\n      <span className=\"todo-count\">\n        {`${activeTodos} item${activeTodos !== 1 ? 's' : ''} left`}\n      </span>\n\n      <nav className=\"filter\">\n        <a\n          href=\"#/\"\n          className={classNames(\n            'filter__link',\n            {\n              selected: selectedFilter === SortBy.all,\n            },\n          )}\n          onClick={onFilterAllTodos}\n        >\n          All\n        </a>\n\n        <a\n          href=\"#/active\"\n          className={classNames(\n            'filter__link',\n            {\n              selected: selectedFilter === SortBy.active,\n            },\n          )}\n          onClick={onFilterActiveTodos}\n        >\n          Active\n        </a>\n\n        <a\n          href=\"#/completed\"\n          className={classNames(\n            'filter__link',\n            {\n              selected: selectedFilter === SortBy.completed,\n            },\n          )}\n          onClick={onFilterCompletedTodos}\n        >\n          Completed\n        </a>\n      </nav>\n\n      <button\n        type=\"button\"\n        className={classNames(\n          'todoapp__clear-completed',\n          {\n            'hide-btn': !completedTodosLength,\n          },\n        )}\n        onClick={onClearCompleted}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\n\nimport React, {\n  ChangeEvent,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { Todo } from '../types/Todo';\nimport { ErrorType } from '../types/ErrorType';\nimport { getTodoId } from '../utils/functionsHelper';\nimport { updateTodo } from '../api/todos';\n\nconst USER_ID = 10632;\n\ntype HeaderProps = {\n  todos: Todo[],\n  loadingIds: number[],\n  updateTodos: (todoList: Todo[]) => void,\n  updateError: (error: ErrorType) => void,\n  postNewTodo: (newTodo: Todo) => void,\n  addTempTodo: (todo: Todo) => void,\n  updateLoadingStatus: (id: React.SetStateAction<number[]>) => void,\n};\n\nexport const Header: React.FC<HeaderProps> = ({\n  todos,\n  loadingIds,\n  updateTodos,\n  updateError,\n  postNewTodo,\n  addTempTodo,\n  updateLoadingStatus,\n}) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [newTodoTitle, setNewTodoTitle] = useState('');\n  const [isAllCompleted, setIsAllCompleted] = useState(false);\n\n  useEffect(() => {\n    setIsAllCompleted(todos.every(todo => todo.completed));\n  }, [todos]);\n\n  const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setNewTodoTitle(e.target.value);\n  };\n\n  const handleMarkAllTodos = () => {\n    const todosPromises: Array<Promise<Todo>> = [];\n\n    const allTodosToCompleted = todos.map(todo => {\n      updateLoadingStatus(prevLoadingIds => [...prevLoadingIds, todo.id]);\n      const updatedTodo = {\n        ...todo,\n        completed: !isAllCompleted,\n      };\n\n      todosPromises.push(updateTodo(updatedTodo.id, updatedTodo));\n\n      return updatedTodo;\n    });\n\n    Promise.all(todosPromises)\n      .then(todosFromServer => {\n        updateTodos(todosFromServer);\n      })\n      .catch(() => {\n        updateError(ErrorType.update);\n      })\n      .finally(() => {\n        updateLoadingStatus([]);\n      });\n\n    setIsAllCompleted(!isAllCompleted);\n\n    updateTodos(allTodosToCompleted);\n  };\n\n  const handleOnEnter = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      if (!newTodoTitle.trim()) {\n        updateError(ErrorType.add);\n      } else {\n        const newTodo = {\n          completed: false,\n          id: getTodoId(),\n          userId: USER_ID,\n          title: newTodoTitle,\n        };\n\n        updateLoadingStatus([...loadingIds]);\n        addTempTodo({ ...newTodo, id: 0 });\n        setNewTodoTitle('');\n        postNewTodo(newTodo);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (inputRef.current && todos.length) {\n      inputRef.current.focus();\n    }\n  }, [todos.length, loadingIds]);\n\n  return (\n    <header className=\"todoapp__header\">\n      {todos.length > 0 && (\n        <button\n          type=\"button\"\n          className=\"todoapp__toggle-all active\"\n          onClick={handleMarkAllTodos}\n        />\n      )}\n\n      <form onSubmit={(e) => e.preventDefault()}>\n        <input\n          ref={inputRef}\n          disabled={loadingIds.length > 0}\n          type=\"text\"\n          className=\"todoapp__new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={newTodoTitle}\n          onChange={handleInputChange}\n          onKeyDown={handleOnEnter}\n        />\n      </form>\n    </header>\n  );\n};\n","export const getTodoId = () => {\n  const randomNumber = Math.random()\n    .toString()\n    .slice(-5);\n\n  return +randomNumber;\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, {\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { UserWarning } from './UserWarning';\nimport { Todo } from './types/Todo';\nimport {\n  deleteTodo,\n  getTodos,\n  postTodo,\n  updateTodo,\n} from './api/todos';\nimport { ErrorType } from './types/ErrorType';\nimport { ErrorNorification } from './Components/ErrorNorification';\nimport { TodosList } from './Components/TodosList';\nimport { SortBy } from './types/SortBy';\nimport { TodoFooter } from './Components/TodoFooter';\nimport { Header } from './Components/Header';\n\nconst USER_ID = 10632;\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [typeOfError, setTypeOfError] = useState<ErrorType>(ErrorType.none);\n  const [filterBy, setFilterBY] = useState(SortBy.all);\n  const [tempTodo, setTempTodo] = useState<Todo | null>(null);\n  const [loadingIds, setLoadingIds] = useState<number[]>([]);\n\n  const countActiveTodos = useMemo(() => {\n    const activeTodosCount = todos.reduce((count, current) => {\n      if (!current.completed) {\n        return count + 1;\n      }\n\n      return count;\n    }, 0);\n\n    return activeTodosCount;\n  }, [todos]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const data = await getTodos(USER_ID);\n\n        setTodos(data);\n      } catch (error) {\n        setTypeOfError(ErrorType.load);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  if (!USER_ID) {\n    return <UserWarning />;\n  }\n\n  const postNewTodoOnServer = async (newTodo: Todo) => {\n    setLoadingIds(prevLoadingIds => [...prevLoadingIds, newTodo.id]);\n\n    try {\n      const newTodoFromServer = await postTodo(USER_ID, newTodo);\n\n      setTodos(prevTodos => [\n        ...prevTodos.filter(todo => todo.id),\n        newTodoFromServer,\n      ]);\n    } catch (error) {\n      setTypeOfError(ErrorType.add);\n      setTodos(prevTodos => prevTodos.filter(todo => todo.id));\n    } finally {\n      setLoadingIds([]);\n      setTempTodo(null);\n    }\n  };\n\n  const handleFilterAllTodos = () => {\n    setFilterBY(SortBy.all);\n  };\n\n  const handleFilterActiveTodos = () => {\n    setFilterBY(SortBy.active);\n  };\n\n  const handleFilterCompletedTodos = () => {\n    setFilterBY(SortBy.completed);\n  };\n\n  const updateTodoStatus = async (currentTodo: Todo) => {\n    setLoadingIds(currentIds => [...currentIds, currentTodo.id]);\n\n    let todoToUpdate: Todo;\n\n    const updatedTodos = await Promise.all(\n      todos.map(async (todo) => {\n        if (todo.id === currentTodo.id) {\n          todoToUpdate = {\n            ...todo,\n            completed: !todo.completed,\n          };\n\n          try {\n            const updatedTodoFromServer = await updateTodo(\n              todoToUpdate.id, todoToUpdate,\n            );\n\n            setTodos(prevTodos => [\n              ...prevTodos.filter(prevTodo => prevTodo.id !== currentTodo.id),\n              updatedTodoFromServer,\n            ]);\n          } catch {\n            setTypeOfError(ErrorType.update);\n          } finally {\n            setLoadingIds([]);\n          }\n\n          return todoToUpdate;\n        }\n\n        return todo;\n      }),\n    );\n\n    setTodos(updatedTodos);\n  };\n\n  const handleClearCompletedTodos = async () => {\n    const clearedTodos = todos.filter(\n      todo => !todo.completed,\n    );\n\n    const clearedTodosID: number[] = [];\n\n    try {\n      const completedTodo = todos.filter(todo => todo.completed)\n        .map(todo => {\n          clearedTodosID.push(todo.id);\n\n          return deleteTodo(todo.id);\n        });\n\n      setLoadingIds(clearedTodosID);\n      await Promise.all(completedTodo);\n    } catch {\n      setTypeOfError(ErrorType.delete);\n    }\n\n    setTodos(clearedTodos);\n    setLoadingIds([]);\n  };\n\n  const handleDeleteTodo = (deletedTodo: Todo) => {\n    setLoadingIds([...loadingIds, deletedTodo.id]);\n    deleteTodo(deletedTodo.id)\n      .then((data) => {\n        if (!data) {\n          setTypeOfError(ErrorType.delete);\n        }\n\n        setTodos([...todos.filter(todo => todo.id !== deletedTodo.id)]);\n        setTempTodo(null);\n        setLoadingIds([]);\n      });\n  };\n\n  const visibleTodosList = [...todos].filter(todo => {\n    switch (filterBy) {\n      case SortBy.active:\n        return !todo.completed;\n\n      case SortBy.completed:\n        return todo.completed;\n\n      default:\n        break;\n    }\n\n    return todo;\n  });\n\n  const changeErrorType = (error: ErrorType) => {\n    setTypeOfError(error);\n  };\n\n  const updateTodosList = (todoList: Todo[]) => {\n    setTodos(todoList);\n  };\n\n  return (\n    <div className=\"todoapp\">\n      <h1 className=\"todoapp__title\">todos</h1>\n\n      <div className=\"todoapp__content\">\n        <Header\n          todos={todos}\n          loadingIds={loadingIds}\n          updateTodos={updateTodosList}\n          updateError={changeErrorType}\n          postNewTodo={postNewTodoOnServer}\n          addTempTodo={setTempTodo}\n          updateLoadingStatus={setLoadingIds}\n        />\n\n        <TodosList\n          todos={visibleTodosList}\n          updateTodoStatus={updateTodoStatus}\n          onDeleteTodo={handleDeleteTodo}\n          loadingIds={loadingIds}\n          tempTodo={tempTodo}\n          updateTodoOnServer={updateTodo}\n          updateLoadingStatus={setLoadingIds}\n          updateTodosList={updateTodosList}\n          updateError={changeErrorType}\n        />\n        {tempTodo && (\n          <TodosList\n            todos={[tempTodo]}\n            updateTodoStatus={updateTodoStatus}\n            onDeleteTodo={handleDeleteTodo}\n            loadingIds={loadingIds}\n            tempTodo={tempTodo}\n            updateTodoOnServer={updateTodo}\n            updateLoadingStatus={setLoadingIds}\n            updateTodosList={updateTodosList}\n            updateError={changeErrorType}\n          />\n        )}\n\n        {todos.length > 0 && (\n          <TodoFooter\n            onFilterAllTodos={handleFilterAllTodos}\n            onFilterActiveTodos={handleFilterActiveTodos}\n            onFilterCompletedTodos={handleFilterCompletedTodos}\n            onClearCompleted={handleClearCompletedTodos}\n            selectedFilter={filterBy}\n            activeTodos={countActiveTodos}\n            todos={todos}\n          />\n        )}\n      </div>\n\n      {typeOfError && (\n        <ErrorNorification\n          errorType={typeOfError}\n          changeErrorType={changeErrorType}\n        />\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './styles/index.scss';\n\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}